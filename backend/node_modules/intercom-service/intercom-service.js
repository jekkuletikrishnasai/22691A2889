'use strict';
var Intercom = require('intercom.io')
  , _ = require('lodash')
  , co = require('co');

module.exports = function intercomServiceClosure(settings) {
    var intercom = new Intercom(settings);

    /**
     * Event Constants
     *
     * These constants represent the event_name sent over to intercom.io
     */
    var HTTP_REQUEST_EVENT = 'HTTP ';


    /***
     * Returns the number of seconds since linux epoch.
     * @returns {number} seconds since linux epoch
     */
    function getCurrentEpochTime() {
        return Math.floor((new Date()).getTime() / 1000);
    }

    /***
     * Create Intercom User
     *
     * @param email
     * @param signUpDate (optional) time at which user signed up at. Defaults to now.
     * @param options (optional) an object which allows you to pass in any of the other parameters which intercom#createUser supports.
     * @returns {Promise}
     */
    function createUser(email, _signUpDate, _options) {

        var user = {
            email: email,
            signed_up_at: _signUpDate || getCurrentEpochTime(),
        };

        var userParameter = _.assign({}, user, _options);

        return intercom.createUser(userParameter);
    }

    /***
     * Register Generic URL
     *
     * @param email of user who initiated the event
     * @param method the method of the http request
     * @param url url of the http request
     * @param status status of the http response
     * @param body body of the http response
     * @param _options (optional) a container for any additional parameters to be sent to intercom.io
     * @returns {Promise}
     */
    function httpRequest(email, method, url, status, body, _options) {
        var event = {
            event_name: HTTP_REQUEST_EVENT + method + ' ' + status,
            email: email,
            created_at: getCurrentEpochTime(),
            metadata: {
                method: method,
                body: JSON.stringify(body, null, 4),
                url: url
            }
        };

        var eventParameters = _.assign({}, event, _options);

        return intercom.createEvent(eventParameters);
    }

    /***
     * Creates a generic event.
     *
     * @param email of user who initiated the event
     * @param eventName name of event passed to intercom.io
     * @param data data which gets passed into intercom.io as meta data
     * @param _options (optional) a container for any additional parameters to be sent to intercom.io
     * @returns {Promise}
     */
    function createEvent(email, eventName, data, _options) {
        var event = {
            event_name: eventName,
            email: email,
            created_at: getCurrentEpochTime(),
            metadata: data
        };

        var eventParameters = _.assign({}, event, _options);

        return intercom.createEvent(eventParameters);
    }

    // TODO: Remove this and replace this functionality in a different manner
    /***
     * Creates an intercom email notification to admins
     *
     * @param email of user who initiated the event
     * @param eventName name of event passed to intercom.io
     * @param data data which gets passed into intercom.io as meta data
     * @param _options (optional) a container for any additional parameters to be sent to intercom.io
     * @returns {Promise}
     */
    function createEmailNotification(email, eventName, data, _options) {
        co(function *coCreateEmailNotification() {
            var intercomUser = yield intercom.getUser({email: email});
            var adminList = yield intercom.listAdmins();
            var adminAccounts = adminList.admins;

            for(var i = 0, len = adminAccounts.length; i < len; i++) {
                var intercomAdmin = adminAccounts[i];
                var event = {
                    message_type: 'email',
                    subject: eventName + ' - ' + email,
                    to: intercomAdmin,
                    from: intercomUser,
                    body: JSON.stringify(data, null, 4)
                };
                var eventParameters = _.assign({}, event, _options);
                intercom.createUserMessage(eventParameters);
            }
        });
    }


    /***
     * List admins
     *
     * @returns {Promise} Promise to return admin accounts within intercom.io
     */
    function listAdmins() {
        return intercom.listAdmins();
    }

    /**
     * Public API
     */
    return {
        createUser: createUser,
        createEvent: createEvent,
        createEmailNotification: createEmailNotification,
        httpRequest: httpRequest
    };
};
